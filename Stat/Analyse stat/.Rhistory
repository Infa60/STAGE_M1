library(readr)
library(ggplot2)
library(tidyverse)
library(dplyr)
Stat_Marker_markerless <- read_csv("/Users/mathieubourgeois/Desktop/Image/Stat_Marker_markerless.csv")
Stat_Marker_IMU <- read_csv("/Users/mathieubourgeois/Desktop/Image/Stat_Marker_IMU_xsens.csv")
Stat_Marker_IMU_opensim <- read_csv("/Users/mathieubourgeois/Desktop/Image/Stat_Marker_IMU_opensim.csv")
Stat_Markerless_with_without <- read_csv("/Users/mathieubourgeois/Desktop/Image/Stat_Markerless_markerless_nomarker.csv")
# Définir les vitesses pour lesquelles vous souhaitez effectuer les calculs
vitesses <- c(60, 80, 100)
# Créer des vecteurs vides pour stocker les résultats
meanICC <- vector("numeric", length(vitesses))
meanRMSE <- vector("numeric", length(vitesses))
meanBiais <- vector("numeric", length(vitesses))
quartile1ICC <- vector("numeric", length(vitesses))
quartile3ICC <- vector("numeric", length(vitesses))
quartile1RMSE <- vector("numeric", length(vitesses))
quartile3RMSE <- vector("numeric", length(vitesses))
quartile1Biais <- vector("numeric", length(vitesses))
quartile3Biais <- vector("numeric", length(vitesses))
medianICC <- vector("numeric", length(vitesses))
medianRMSE <- vector("numeric", length(vitesses))
medianBiais <- vector("numeric", length(vitesses))
minICC <- vector("numeric", length(vitesses))
maxICC <- vector("numeric", length(vitesses))
minRMSE <- vector("numeric", length(vitesses))
maxRMSE <- vector("numeric", length(vitesses))
minBiais <- vector("numeric", length(vitesses))
maxBiais <- vector("numeric", length(vitesses))
# Effectuer les calculs pour chaque vitesse et stocker les résultats dans les vecteurs correspondants
for (i in 1:length(vitesses)) {
filtered_data <- filter(Stat_Markerless_with_without, Vitesse == vitesses[i])
meanICC[i] <- mean(filtered_data$ICC)
meanRMSE[i] <- mean(filtered_data$RMSE)
meanBiais[i] <- mean(filtered_data$Biais)
quartile1ICC[i] <- quantile(filtered_data$ICC, 0.25)
quartile3ICC[i] <- quantile(filtered_data$ICC, 0.75)
quartile1RMSE[i] <- quantile(filtered_data$RMSE, 0.25)
quartile3RMSE[i] <- quantile(filtered_data$RMSE, 0.75)
quartile1Biais[i] <- quantile(filtered_data$Biais, 0.25)
quartile3Biais[i] <- quantile(filtered_data$Biais, 0.75)
medianICC[i] <- median(filtered_data$ICC)
medianRMSE[i] <- median(filtered_data$RMSE)
medianBiais[i] <- median(filtered_data$Biais)
minICC[i] <- min(filtered_data$ICC)
maxICC[i] <- max(filtered_data$ICC)
minRMSE[i] <- min(filtered_data$RMSE)
maxRMSE[i] <- max(filtered_data$RMSE)
minBiais[i] <- min(filtered_data$Biais)
maxBiais[i] <- max(filtered_data$Biais)
}
# Créer un data frame avec les résultats
resultsMarkerless_with_without <- data.frame(Vitesse = vitesses,
MeanICC = meanICC,
MeanRMSE = meanRMSE,
MeanBiais = meanBiais,
Quartile1ICC = quartile1ICC,
Quartile3ICC = quartile3ICC,
Quartile1RMSE = quartile1RMSE,
Quartile3RMSE = quartile3RMSE,
Quartile1Biais = quartile1Biais,
Quartile3Biais = quartile3Biais,
MedianICC = medianICC,
MedianRMSE = medianRMSE,
MedianBiais = medianBiais,
MinICC = minICC,
MaxICC = maxICC,
MinRMSE = minRMSE,
MaxRMSE = maxRMSE,
MinBiais = minBiais,
MaxBiais = maxBiais)
# Créer un graphique à partir du dataframe "combinedResults"
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais, color = Légende),
size = 2) +  # Tracer la ligne épaisse entre les quartiles
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais, color = Légende),
size = 0.5) +  # Ajouter une ligne fine représentant le min et le max
geom_point(aes(x = Vitesse, y = MedianBiais, color = Légende),
size = 3, shape = 21, fill = "white", stroke = 2) +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(4, 24, 44), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(combinedResults$MinBiais)-1, max(combinedResults$MaxBiais)+1))
# Créer un graphique à partir du dataframe "combinedResults"
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais, color = Légende),
size = 2) +  # Tracer la ligne épaisse entre les quartiles
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais, color = Légende),
size = 0.5) +  # Ajouter une ligne fine représentant le min et le max
geom_point(aes(x = Vitesse, y = MedianBiais, color = Légende),
size = 3, shape = 21, fill = "white", stroke = 2) +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(4, 24, 44), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1))
# Créer un graphique à partir du dataframe "combinedResults"
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais, color = "blue"),
size = 2) +  # Tracer la ligne épaisse entre les quartiles
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais, color = "blue"),
size = 0.5) +  # Ajouter une ligne fine représentant le min et le max
geom_point(aes(x = Vitesse, y = MedianBiais, color = "blue"),
size = 3, shape = 21, fill = "white", stroke = 2) +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(4, 24, 44), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1))
# Créer un graphique à partir du dataframe "combinedResults"
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais, color = "blue"),
size = 2) +  # Tracer la ligne épaisse entre les quartiles
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais, color = "blue"),
size = 0.5) +  # Ajouter une ligne fine représentant le min et le max
geom_point(aes(x = Vitesse, y = MedianBiais, color = "blue"),
size = 3, shape = 21, fill = "white", stroke = 2) +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(60, 80, 100), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1))
# Créer un graphique à partir du dataframe "combinedResults"
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais, color = "red"),
size = 2) +  # Tracer la ligne épaisse entre les quartiles
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais, color = "red"),
size = 0.5) +  # Ajouter une ligne fine représentant le min et le max
geom_point(aes(x = Vitesse, y = MedianBiais, color = "blue"),
size = 3, shape = 21, fill = "white", stroke = 2) +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(60, 80, 100), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1))
# Créer un graphique à partir du dataframe "combinedResults"
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais, color = "red"),
size = 2) +  # Tracer la ligne épaisse entre les quartiles
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais, color = "red"),
size = 0.5) +  # Ajouter une ligne fine représentant le min et le max
geom_point(aes(x = Vitesse, y = MedianBiais, color = "red"),
size = 3, shape = 21, fill = "white", stroke = 2) +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(60, 80, 100), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1))
# Créer un graphique à partir du dataframe "combinedResults"
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais, color = "blue"),
size = 2) +  # Tracer la ligne épaisse entre les quartiles
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais, color = "blue"),
size = 0.5) +  # Ajouter une ligne fine représentant le min et le max
geom_point(aes(x = Vitesse, y = MedianBiais, color = "blue"),
size = 3, shape = 21, fill = "white", stroke = 2) +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(60, 80, 100), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1))
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais),
color = "red", size = 2) +  # Tracer la ligne épaisse entre les quartiles en rouge
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais),
color = "red", size = 0.5) +  # Ajouter une ligne fine représentant le min et le max en rouge
geom_point(aes(x = Vitesse, y = MedianBiais),
size = 3, shape = 21, fill = "white", stroke = 2, color = "red") +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
scale_x_continuous(breaks = c(60, 80, 100), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1)) +
theme(legend.position = "none")  # Enlever la légende
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = Biais)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1Biais, yend = Quartile3Biais),
color = "red", size = 2) +  # Tracer la ligne épaisse entre les quartiles en rouge
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinBiais, yend = MaxBiais),
color = "red", size = 0.5) +  # Ajouter une ligne fine représentant le min et le max en rouge
geom_point(aes(x = Vitesse, y = MedianBiais),
size = 3, shape = 21, fill = "white", stroke = 2, color = "red") +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
geom_vline(xintercept = c(70, 90), linetype = "dashed", color = "black") +  # Ajouter les lignes verticales
scale_x_continuous(breaks = c(60, 80, 100), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(min(resultsMarkerless_with_without$MinBiais)-1, max(resultsMarkerless_with_without$MaxBiais)+1)) +
theme(legend.position = "none")  # Enlever la légende
ggplot(resultsMarkerless_with_without, aes(x = Vitesse, y = RMSE)) +
geom_segment(aes(x = Vitesse, xend = Vitesse, y = Quartile1RMSE, yend = Quartile3RMSE),
color = "red", size = 2) +  # Tracer la ligne épaisse entre les quartiles en rouge
geom_segment(aes(x = Vitesse, xend = Vitesse, y = MinRMSE, yend = MaxRMSE),
color = "red", size = 0.5) +  # Ajouter une ligne fine représentant le min et le max en rouge
geom_point(aes(x = Vitesse, y = MedianRMSE),
size = 3, shape = 21, fill = "white", stroke = 2, color = "red") +  # Ajouter le rond rouge pour la moyenne avec le centre transparent
geom_vline(xintercept = c(70, 90), linetype = "dashed", color = "black") +  # Ajouter les lignes verticales
scale_x_continuous(breaks = c(60, 80, 100), labels = c("60", "80", "100")) +
scale_y_continuous(limits = c(0, max(resultsMarkerless_with_without$MaxRMSE)+1)) +
theme(legend.position = "none")  # Enlever la légende
# Chargement de la bibliothèque 'psych' pour calculer l'ICC
library(psych)
library(readr)
library(irr)
library(ggplot2)
library(tidyverse)
resultats_amplitude_IMU <- read_csv("~/Desktop/Stat/resultats_amplitude_IMU_Xsens.csv")
resultats_amplitude_marker <- read_csv("~/Desktop/Stat/resultats_amplitude_marker.csv")
resultats_amplitude_markerless <- read_csv("~/Desktop/Stat/resultats_amplitude_markerless.csv")
resultats_amplitude_markerless_nomarker <- read_csv("~/Desktop/Stat/resultats_amplitude_markerless_nomarker.csv")
resultats_amplitude_IMU_Opensim <- read_csv("~/Desktop/Stat/resultats_amplitude_IMU_Opensim.csv")
dataMarker <- filter(resultats_amplitude_marker,Articulation==knee_flexion_r) |> filter(`Vitesse velo` == 60) |> select(-Articulation,-`Vitesse velo`,-Sujet)
dataMarker <- filter(resultats_amplitude_marker,Articulation=='knee_flexion_r') |> filter(`Vitesse velo` == 60) |> select(-Articulation,-`Vitesse velo`,-Sujet)
dataIMU <- filter(resultats_amplitude_markerless,Articulation=='knee_flexion_r') |> filter(`Vitesse velo` == 60) |> select(-Articulation,-`Vitesse velo`,-Sujet)
# Sélectionner uniquement les valeurs pour les évaluateurs Marker et IMU
donnees <- data.frame(
MethodeA = c(t(dataMarker)),
MethodeB = c(t(dataIMU))
)
resultat_icc <- ICC(donnees)
print(resultat_icc)
# Chargement de la bibliothèque 'psych' pour calculer l'ICC
library(psych)
library(readr)
library(irr)
library(ggplot2)
library(tidyverse)
resultats_amplitude_IMU <- read_csv("~/Desktop/Stat/resultats_amplitude_IMU_Xsens.csv")
resultats_amplitude_IMU <- read_csv("~/Stat/resultats_amplitude_IMU_Xsens.csv")
resultats_amplitude_IMU <- read_csv("/Users/mathieubourgeois/Library/Mobile Documents/com~apple~CloudDocs/Desktop/MASTER/M1/STAGE_M1_TRAITEMENT/Stat/resultats_amplitude_IMU_Xsens.csv")
resultats_amplitude_marker <- read_csv("/Users/mathieubourgeois/Library/Mobile Documents/com~apple~CloudDocs/Desktop/MASTER/M1/STAGE_M1_TRAITEMENT/Stat/resultats_amplitude_marker.csv")
resultats_amplitude_markerless <- read_csv("/Users/mathieubourgeois/Library/Mobile Documents/com~apple~CloudDocs/Desktop/MASTER/M1/STAGE_M1_TRAITEMENT/Stat/resultats_amplitude_markerless.csv")
resultats_amplitude_markerless_nomarker <- read_csv("/Users/mathieubourgeois/Library/Mobile Documents/com~apple~CloudDocs/Desktop/MASTER/M1/STAGE_M1_TRAITEMENT/Stat/resultats_amplitude_markerless_nomarker.csv")
resultats_amplitude_IMU_Opensim <- read_csv("/Users/mathieubourgeois/Library/Mobile Documents/com~apple~CloudDocs/Desktop/MASTER/M1/STAGE_M1_TRAITEMENT/Stat/resultats_amplitude_IMU_Opensim.csv")
View(resultats_amplitude_IMU)
View(resultats_amplitude_IMU)
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation,-`Vitesse velo`,-Sujet)
View(dataIMU)
View(resultats_amplitude_IMU)
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
View(dataIMU)
View(dataIMU)
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
col_indices <- 2:11
# Calculer la moyenne des 10 colonnes
means <- rowMeans(dataIMU[, col_indices])
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
col_indices <- 3:11
# Calculer la moyenne des 10 colonnes
means <- rowMeans(dataIMU[, col_indices])
# Ajouter la moyenne en tant que nouvelle colonne
data <- cbind(data, Mean = means)
# Supprimer les 10 colonnes d'origine
data <- data[, -col_indices]
# Afficher le tableau résultant
print(data)
View(data)
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
col_indices <- 3:12
# Calculer la moyenne des 10 colonnes
means <- rowMeans(dataIMU[, col_indices])
# Ajouter la moyenne en tant que nouvelle colonne
data <- cbind(data, Mean = means)
# Supprimer les 10 colonnes d'origine
data <- data[, -col_indices]
# Afficher le tableau résultant
print(data)
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
col_indices <- 3:13
# Calculer la moyenne des 10 colonnes
means <- rowMeans(dataIMU[, col_indices])
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
col_indices <- 3:12
# Calculer la moyenne des 10 colonnes
means <- rowMeans(dataIMU[, col_indices])
# Ajouter la moyenne en tant que nouvelle colonne
data <- cbind(data, Mean = means)
# Supprimer les 10 colonnes d'origine
data <- data[, -col_indices]
# Afficher le tableau résultant
print(data)
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
col_indices <- 3:12
# Calculer la moyenne des 10 colonnes
means <- rowMeans(dataIMU[, col_indices])
# Ajouter la moyenne en tant que nouvelle colonne
dataIMU <- cbind(dataIMU, Mean = means)
# Supprimer les 10 colonnes d'origine
dataIMU <- dataIMU[, -col_indices]
# Afficher le tableau résultant
print(dataIMU)
View(dataIMU)
View(dataIMU)
col_indices <- 3:12
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataIMU[, col_indices])
dataIMU <- cbind(dataIMU, Mean = means)
dataIMU <- dataIMU[, -col_indices]
dataML <- filter(resultats_amplitude_markerless,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataML[, col_indices])
dataML <- cbind(dataML, Mean = means)
dataML <- dataML[, -col_indices]
dataM <- filter(resultats_amplitude_marker,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataM[, col_indices])
dataM <- cbind(dataM, Mean = means)
dataM <- dataM[, -col_indices]
dataMLN <- filter(resultats_amplitude_markerless_nomarker,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataMLN[, col_indices])
dataMLN <- cbind(dataMLN, Mean = means)
dataMLN <- dataMLN[, -col_indices]
View(dataIMU)
# Fusionnez les dataframes en un seul en utilisant la fonction merge
merged_df <- merge(merge(merge(df1, df2, by = c("Vitesse", "Sujet"), all = TRUE),
df3, by = c("Vitesse", "Sujet"), all = TRUE),
df4, by = c("Vitesse", "Sujet"), all = TRUE)
# Fusionnez les dataframes en un seul en utilisant la fonction merge
merged_df <- merge(merge(merge(dataIMU, dataML, by = c("Vitesse", "Sujet"), all = TRUE),
dataM, by = c("Vitesse", "Sujet"), all = TRUE),
dataMLN, by = c("Vitesse", "Sujet"), all = TRUE)
# Fusionnez les dataframes en un seul en utilisant la fonction merge
merged_df <- merge(merge(merge(dataIMU, dataML, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataM, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataMLN, by = c("Vitesse velo", "Sujet"), all = TRUE)
# Remplacez les valeurs NA par 0 si nécessaire
merged_df[is.na(merged_df)] <- 0
# Affichez le dataframe résultant
print(merged_df)
View(merged_df)
# Fusionnez les dataframes en un seul en utilisant la fonction merge
merged_df <- merge(merge(merge(dataIMU, dataML, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataM, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataMLN, by = c("Vitesse velo", "Sujet"), all = TRUE)
# Remplacez les valeurs NA par 0 si nécessaire
merged_df[is.na(merged_df)] <- 0
colnames(merged_df)[3:ncol(merged_df)] <- c("Methode1", "Methode2", "Methode3", "Methode4")
print(merged_df)
View(merged_df)
View(dataIMU)
View(dataIMU)
col_indices <- 3:12
dataIMU <- filter(resultats_amplitude_IMU,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataIMU[, col_indices])
dataIMU <- cbind(dataIMU, Mean = means)
dataIMU <- dataIMU[, -col_indices]
dataML <- filter(resultats_amplitude_markerless,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataML[, col_indices])
dataML <- cbind(dataML, Mean = means)
dataML <- dataML[, -col_indices]
dataM <- filter(resultats_amplitude_marker,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataM[, col_indices])
dataM <- cbind(dataM, Mean = means)
dataM <- dataM[, -col_indices]
dataIMUO <- filter(resultats_amplitude_IMU_Opensim,Articulation=='knee_flexion_r')  |> select(-Articulation)
means <- rowMeans(dataIMUO[, col_indices])
dataIMUO <- cbind(dataIMUO, Mean = means)
dataIMUO <- dataIMUO[, -col_indices]
# Fusionnez les dataframes en un seul en utilisant la fonction merge
merged_df <- merge(merge(merge(dataIMU, dataML, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataM, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataIMUO, by = c("Vitesse velo", "Sujet"), all = TRUE)
# Remplacez les valeurs NA par 0 si nécessaire
merged_df[is.na(merged_df)] <- 0
colnames(merged_df)[3:ncol(merged_df)] <- c("IMU_Xsens", "Markerless", "Marker", "IMU_O")
print(merged_df)
View(merged_df)
# Fusionnez les dataframes en un seul en utilisant la fonction merge
merged_df <- merge(merge(merge(dataIMU, dataML, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataM, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataIMUO, by = c("Vitesse velo", "Sujet"), all = TRUE)
# Remplacez les valeurs NA par 0 si nécessaire
merged_df[is.na(merged_df)] <- 0
colnames(merged_df)[3:ncol(merged_df)] <- c("IMU_Xsens", "Markerless", "Marker", "IMU_O")
print(merged_df)
# Transposer la première colonne en ligne
transposed_df <- t(merged_df)
# Rétablir les noms de colonnes pour la première ligne
colnames(transposed_df) <- transposed_df[1, ]
# Supprimer la première ligne du dataframe transposé
transposed_df <- transposed_df[-1, ]
# Afficher le dataframe transposé
print(transposed_df)
View(transposed_df)
# Charger la bibliothèque reshape2
library(reshape2)
# Créer un exemple de dataframe
data_df <- merged_df
# Transposer la première colonne en ligne
transposed_df <- t(data_df)
# Rétablir les noms de colonnes pour la première ligne
colnames(transposed_df) <- transposed_df[1, ]
# Supprimer la première ligne du dataframe transposé
transposed_df <- transposed_df[-1, ]
# Utiliser melt pour convertir les colonnes en lignes
melted_df <- melt(transposed_df, id.vars = "Sujet")
# Rétablir les noms de colonnes
colnames(melted_df) <- c("Sujet", "Vitesse_Velo", "Valeur")
# Afficher le dataframe final
print(melted_df)
# Charger la bibliothèque reshape2
library(reshape2)
# Créer un exemple de dataframe
data_df <- merged_df
# Transposer la première colonne en ligne
transposed_df <- t(data_df)
# Rétablir les noms de colonnes pour la première ligne
colnames(transposed_df) <- transposed_df[1, ]
# Supprimer la première ligne du dataframe transposé
transposed_df <- transposed_df[-1, ]
# Utiliser melt pour convertir les colonnes en lignes
melted_df <- melt(transposed_df, id.vars = "Sujet")
# Rétablir les noms de colonnes
colnames(melted_df) <- c("Sujet", "Vitesse_Velo", "Valeur")
# Afficher le dataframe final
print(melted_df)
View(melted_df)
# Charger la bibliothèque reshape2
library(reshape2)
# Créer un exemple de dataframe
data_df <- merged_df
# Utiliser melt pour convertir les colonnes de méthodes en lignes
melted_df <- melt(data_df, id.vars = c("Sujet", "Vitesse_Velo"))
# Charger la bibliothèque reshape2
library(reshape2)
# Créer un exemple de dataframe
data_df <- merged_df
# Utiliser melt pour convertir les colonnes de méthodes en lignes
melted_df <- melt(data_df, id.vars = c("Sujet", "Vitesse velo"))
# Rétablir les noms de colonnes
colnames(melted_df) <- c("Sujet", "Vitesse_Velo", "Methode", "Valeur")
# Afficher le dataframe final
print(melted_df)
View(melted_df)
# Extraire les sujets distincts
sujets_uniques <- unique(merged_df$Sujet)
# Créer un dataframe pour les sujets
sujets_df <- data.frame(Sujet = sujets_uniques)
# Utiliser pivot_longer pour regrouper les colonnes de méthode
long_df <- pivot_longer(merged_df, cols = starts_with("Methode"),
names_to = "Methode", values_to = "Valeur")
View(merged_df)
# Utiliser la fonction reshape pour transformer les données
reshaped_df <- reshape(data_df, direction = "long", varying = list(c("Methode1", "Methode2", "Methode3", "Methode4")),
v.names = "Valeur", idvar = c("Sujet", "Vitesse_Velo"),
times = c("Methode1", "Methode2", "Methode3", "Methode4"),
timevar = "Methode", new.row.names = 1:1000)
# Utiliser la fonction reshape pour transformer les données
reshaped_df <- reshape(merged_df, direction = "long", varying = list(c("Methode1", "Methode2", "Methode3", "Methode4")),
v.names = "Valeur", idvar = c("Sujet", "Vitesse_Velo"),
times = c("Methode1", "Methode2", "Methode3", "Methode4"),
timevar = "Methode", new.row.names = 1:1000)
# Fusionnez les dataframes en un seul en utilisant la fonction merge
merged_df <- merge(merge(merge(dataIMU, dataML, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataM, by = c("Vitesse velo", "Sujet"), all = TRUE),
dataIMUO, by = c("Vitesse velo", "Sujet"), all = TRUE)
# Remplacez les valeurs NA par 0 si nécessaire
merged_df[is.na(merged_df)] <- 0
colnames(merged_df)[3:ncol(merged_df)] <- c("Methode1", "Methode2", "Methode3", "Methode4")
print(merged_df)
# Utiliser la fonction reshape pour transformer les données
reshaped_df <- reshape(merged_df, direction = "long", varying = list(c("Methode1", "Methode2", "Methode3", "Methode4")),
v.names = "Valeur", idvar = c("Sujet", "Vitesse_Velo"),
times = c("Methode1", "Methode2", "Methode3", "Methode4"),
timevar = "Methode", new.row.names = 1:1000)
# Réinitialiser les noms de colonnes
colnames(reshaped_df) <- c("Sujet", "Vitesse_Velo", "Methode", "Valeur")
# Afficher le dataframe final
print(reshaped_df)
View(reshaped_df)
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = Vitesse_Velo,
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = Vitesse Velo,
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = 'Vitesse Velo',
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = 'Vitesse velo',
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Réinitialiser les noms de colonnes
colnames(wide_df) <- c("Sujet", paste0("Vitesse_", unique(data_df$Vitesse_Velo)), colnames(wide_df)[-1])
# Afficher le dataframe final
print(wide_df)
View(wide_df)
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = 'Vitesse velo',
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Réinitialiser les noms de colonnes
#colnames(wide_df) <- c("Sujet", paste0("Vitesse_", unique(data_df$Vitesse_Velo)), colnames(wide_df)[-1])
# Afficher le dataframe final
print(wide_df)
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = 'Vitesse velo',
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Réinitialiser les noms de colonnes
#colnames(wide_df) <- c("Sujet", paste0("Vitesse_", unique(data_df$Vitesse_Velo)), colnames(wide_df)[-1])
# Afficher le dataframe final
# Créer un nouveau dataframe avec la ligne à ajouter
nouvelle_ligne <- data.frame(Vitesse = "Vitesse",
Sujet = rep("Vitesse", 3),
Methode1 = c(100, 60, 80),
Methode2 = c(100, 60, 80),
Methode3 = c(100, 60, 80),
Methode4 = c(100, 60, 80),
Ecritoire = c(100, 60, 80),
stringsAsFactors = FALSE)
# Utiliser rbind pour ajouter la nouvelle ligne au dataframe existant
wide_df <- rbind(wide_df, nouvelle_ligne)
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = 'Vitesse velo',
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Réinitialiser les noms de colonnes
#colnames(wide_df) <- c("Sujet", paste0("Vitesse_", unique(data_df$Vitesse_Velo)), colnames(wide_df)[-1])
print(wide_df)
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = 'Vitesse velo',
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Réinitialiser les noms de colonnes
#colnames(wide_df) <- c("Sujet", paste0("Vitesse_", unique(data_df$Vitesse_Velo)), colnames(wide_df)[-1])
print(wide_df)
# Réorganiser les colonnes
data_df <- wide_df %>%
select(Sujet, contains("60"), contains("80"), contains("100"))
# Afficher le dataframe réorganisé
print(data_df)
View(data_df)
# Utiliser pivot_wider pour regrouper les colonnes de méthode
wide_df <- pivot_wider(merged_df, id_cols = Sujet, names_from = 'Vitesse velo',
values_from = c(Methode1, Methode2, Methode3, Methode4))
# Réinitialiser les noms de colonnes
#colnames(wide_df) <- c("Sujet", paste0("Vitesse_", unique(data_df$Vitesse_Velo)), colnames(wide_df)[-1])
print(wide_df)
# Réorganiser les colonnes
data_df <- wide_df %>%
select(Sujet, contains("60"), contains("80"), contains("100"))
# Afficher le dataframe réorganisé
print(data_df)
# Exporter en CSV
write.csv(data_df, file = "/Users/mathieubourgeois/Desktop/TEST.csv", row.names = FALSE)
